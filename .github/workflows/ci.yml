name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  GOLANGCI_LINT_VERSION: 'v1.55.2'
  IMAGE_NAME: remote-docker
  IMAGE_OWNER: telkombe

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install Go dependencies
        run: |
          cd backend
          go mod download
          
      - name: Install Node dependencies
        run: |
          cd ui
          npm ci
          
      - name: Run Go linters
        uses: golangci/golangci-lint-action@v4
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: backend
          args: --timeout=10m
          
      - name: Run ESLint
        run: |
          cd ui
          npm run lint || echo "::warning::ESLint found issues - continuing with non-zero exit code"
          
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Go dependencies
        run: |
          cd backend
          go mod download
          
      - name: Install Node dependencies
        run: |
          cd ui
          npm ci
          
      - name: Run Go tests
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          
      - name: Run Node tests
        run: |
          cd ui
          if [ -f "jest.config.js" ] || [ -f "jest.config.ts" ] || [ -f "jest.config.json" ] || grep -q '"jest"' package.json; then
            npm test -- --coverage --watchAll=false --passWithNoTests
          else
            echo "::warning::No Jest configuration found, skipping tests"
            mkdir -p coverage
            echo '{}' > coverage/coverage-final.json
          fi
          
      - name: Upload Go coverage
        if: always() && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Upload Node coverage
        if: always() && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          directory: ./ui/coverage
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}
          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: remote-docker:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/remote-docker.tar
          
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/remote-docker.tar
          retention-days: 1
          
      - name: Build MCP server images
        run: |
          cd mcp-servers
          if [ -f "build.sh" ]; then
            chmod +x build.sh
            ./build.sh --no-push || echo "::warning::MCP server build failed"
          else
            echo "::warning::No MCP server build script found"
          fi
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: docker load -i /tmp/remote-docker.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'remote-docker:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./backend/...'
          
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'
          
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Check for integration tests
        id: check-tests
        run: |
          if [ -d "tests/integration" ] && find tests/integration -name "*_test.go" -type f | grep -q .; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Run integration tests
        if: steps.check-tests.outputs.has_tests == 'true'
        run: |
          cd tests/integration
          go test -v ./...
          
      - name: Skip integration tests
        if: steps.check-tests.outputs.has_tests == 'false'
        run: echo "::notice::No integration tests found"
          
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    env:
      IMAGE_NAME: remote-docker
      IMAGE_OWNER: telkombe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check if release needed
        id: check-release
        run: |
          # Check if we have a new version in metadata.json
          if [ -f "metadata.json" ]; then
            VERSION=$(jq -r .version metadata.json)
            if git tag | grep -q "^v${VERSION}$"; then
              echo "Version v${VERSION} already released"
              echo "needed=false" >> $GITHUB_OUTPUT
            else
              echo "New version v${VERSION} detected"
              echo "needed=true" >> $GITHUB_OUTPUT
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No metadata.json found"
            echo "needed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up Docker Buildx
        if: steps.check-release.outputs.needed == 'true'
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: steps.check-release.outputs.needed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.IMAGE_OWNER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Download Docker image
        if: steps.check-release.outputs.needed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load and push Docker image
        if: steps.check-release.outputs.needed == 'true'
        run: |
          docker load -i /tmp/remote-docker.tar
          docker tag remote-docker:test telkombe/remote-docker:latest
          docker tag remote-docker:test telkombe/remote-docker:${{ steps.check-release.outputs.version }}
          docker push telkombe/remote-docker:latest
          docker push telkombe/remote-docker:${{ steps.check-release.outputs.version }}
          
      - name: Create Release
        if: steps.check-release.outputs.needed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check-release.outputs.version }}
          name: Release v${{ steps.check-release.outputs.version }}
          body: |
            Docker Desktop Extension v${{ steps.check-release.outputs.version }}
            
            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false