name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install Go dependencies
        run: |
          cd backend
          go mod download
          
      - name: Install Node dependencies
        run: |
          cd ui
          npm ci
          
      - name: Run Go linters
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m
          
      - name: Run ESLint
        run: |
          cd ui
          npm run lint
          
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Run Go tests
        run: |
          cd backend
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          
      - name: Run Node tests
        run: |
          cd ui
          npm test -- --coverage --watchAll=false
          
      - name: Upload Go coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.out
          flags: backend
          
      - name: Upload Node coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./ui/coverage
          flags: frontend
          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: remote-docker:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build MCP server images
        run: |
          cd mcp-servers
          ./build.sh --no-push
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'remote-docker:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./backend/...'
          
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'
          
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run integration tests
        run: |
          cd tests/integration
          go test -v ./...
          
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract version
        id: version
        run: |
          VERSION=$(jq -r .version metadata.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            telkombe/remote-docker:latest
            telkombe/remote-docker:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Docker Desktop Extension v${{ steps.version.outputs.version }}
            
            See [CHANGELOG.md](CHANGELOG.md) for details.
          draft: false
          prerelease: false