name: Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install frontend dependencies
      run: |
        cd ui
        npm ci

    - name: Run npm audit
      run: |
        cd ui
        npm audit --audit-level=high || echo "Found vulnerabilities (expected for Dependabot PRs)"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install Go dependencies
      run: |
        cd backend
        go mod download

    - name: Install gosec
      run: |
        # Use the latest release URL to avoid GitHub auth issues
        curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run gosec security scanner
      run: |
        cd backend
        if ls *.go 1> /dev/null 2>&1; then
          gosec -f sarif -o gosec-results.sarif ./... || echo "::warning::gosec found issues but continuing"
        else
          echo "No Go files found, creating empty SARIF"
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gosec"}},"results":[]}]}' > gosec-results.sarif
        fi
        # Ensure the file always exists
        if [ ! -f gosec-results.sarif ]; then
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"gosec"}},"results":[]}]}' > gosec-results.sarif
        fi

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Ensure Trivy SARIF file exists
      run: |
        if [ ! -f trivy-results.sarif ]; then
          echo "Creating empty Trivy SARIF file"
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"trivy"}},"results":[]}]}' > trivy-results.sarif
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
    - name: Upload gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'backend/gosec-results.sarif'
      continue-on-error: true