name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        cd backend
        go mod download

    - name: Check for tests and run if they exist
      run: |
        cd backend
        if find . -name "*_test.go" | grep -q .; then
          echo "Found Go tests, running them..."
          go test -v -race -coverprofile=coverage.out ./...
        else
          echo "No Go tests found, creating placeholder coverage..."
          echo "mode: set" > coverage.out
          echo "No tests yet" > test_results.txt
        fi

    - name: Generate coverage report
      run: |
        cd backend
        if [ -f coverage.out ] && [ -s coverage.out ]; then
          go tool cover -html=coverage.out -o coverage.html
        else
          echo "<html><body><h1>No tests available yet</h1></body></html>" > coverage.html
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.html

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      run: |
        cd ui
        npm ci

    - name: Run linter
      run: |
        cd ui
        npm run lint

    - name: Run tests
      run: |
        cd ui
        npm test
        mkdir -p coverage
        echo '{"summary": {"total": {"statements": {"total": 0, "covered": 0}}}}' > coverage/coverage-summary.json

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: ui/coverage/

  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify build context
      run: |
        echo "Checking build context..."
        ls -la
        echo "Backend files:"
        ls -la backend/
        echo "UI files:"
        ls -la ui/

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: remote-docker:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run --rm -d --name test-container remote-docker:test
        sleep 10
        echo "Container logs:"
        docker logs test-container || echo "No logs available"
        echo "Stopping container..."
        docker stop test-container || echo "Container already stopped"